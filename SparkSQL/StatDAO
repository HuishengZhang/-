package com.imooc

import java.sql.{Connection, PreparedStatement}

import scala.collection.mutable.ListBuffer

/**
  * 各个维度统计的DAO操作
  */
object StatDAO {
  /**
    * 批量保存DayVideoAccessStat到数据库
    * @param list
    */
    def insertDayVideoAccessTopN(list: ListBuffer[DayVideoAccessStat])={
        var connection:Connection = null
        var pstmt:PreparedStatement = null
      try{
        connection = MySQLUtils.getConnection()
        //设置手动提交
        connection.setAutoCommit(false)
        val sql = "insert into day_video_access_topN_stat(day,cms_id,times) values (?,?,?)"
        pstmt = connection.prepareStatement(sql)
        for(ele <- list){
          pstmt.setString(1, ele.day)
          pstmt.setLong(2, ele.cmsId)
          pstmt.setLong(3, ele.times)
          pstmt.addBatch()
        }
          pstmt.executeBatch()//执行批量处理
        connection.commit()

      }catch {
        case e: Exception => e.printStackTrace()
      }finally {
        MySQLUtils.release(connection,pstmt)
      }
    }


  def DayCityVideoAccessStat(list: ListBuffer[DayCityVideoAccessStat])={
    var connection:Connection = null
    var pstmt:PreparedStatement = null
    try{
      connection = MySQLUtils.getConnection()
      //设置手动提交
      connection.setAutoCommit(false)
      val sql = "insert into day_video_city_access_topN_stat(day,cms_id,city,times,timesRank) values (?,?,?,?,?)"
      pstmt = connection.prepareStatement(sql)
      for(ele <- list){
        pstmt.setString(1, ele.day)
        pstmt.setLong(2, ele.cms_id)
        pstmt.setString(3, ele.city)
        pstmt.setLong(4, ele.times)
        pstmt.setInt(5, ele.timesRank)
        pstmt.addBatch()
      }
      pstmt.executeBatch()//执行批量处理
      connection.commit()

    }catch {
      case e: Exception => e.printStackTrace()
    }finally {
      MySQLUtils.release(connection,pstmt)
    }
  }



  def TrafficVideoAccessStat(list: ListBuffer[DayVideoTrafficStat])={
    var connection:Connection = null
    var pstmt:PreparedStatement = null
    try{
      connection = MySQLUtils.getConnection()
      //设置手动提交
      connection.setAutoCommit(false)
      val sql = "insert into day_video_traffics_access_topN_stat(day,cmsId,traffics) values (?,?,?)"
      pstmt = connection.prepareStatement(sql)
      for(ele <- list){
        pstmt.setString(1, ele.day)
        pstmt.setLong(2, ele.cmsId)
        pstmt.setLong(3, ele.traffics)
        pstmt.addBatch()
      }
      pstmt.executeBatch()//执行批量处理
      connection.commit()

    }catch {
      case e: Exception => e.printStackTrace()
    }finally {
      MySQLUtils.release(connection,pstmt)
    }
  }

  /**
    * 删除指定日期的数据
    * @param day
    */
  def deleteData(day: String)={
    val tables = Array("day_video_access_topN_stat",
      "day_video_city_access_topN_stat","day_video_traffics_access_topN_stat")
    var connection: Connection = null
    var pstmet: PreparedStatement = null
    try{
      connection = MySQLUtils.getConnection()
      for(table <- tables){
        //delete from table ……
        val deleteSQL = s"delete from $table where day = ?"
       pstmet =  connection.prepareStatement(deleteSQL)
        pstmet.setString(1, day)
        pstmet.executeUpdate()
      }
    }catch {
      case e: Exception => e.printStackTrace()
    }finally {
      MySQLUtils.release(connection, pstmet)
    }
  }

}
