package cn.zhanghuisheng.course04;

import org.apache.flink.api.common.functions.*;
import org.apache.flink.api.common.operators.Order;
import org.apache.flink.api.java.ExecutionEnvironment;
import org.apache.flink.api.java.operators.DataSource;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.api.java.tuple.Tuple3;
import org.apache.flink.util.Collector;

import java.util.ArrayList;
import java.util.List;

public class JavaDataSetTransformationApp {

    public static void main(String[] args) throws Exception {
        ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();

//        filterFunction(env);
//        mapPartitionFunction(env);
        firstFunction(env);
//          flatMapFunction(env);
//            distinctFunction(env);
//    joinFunction(env);
//        outJoinFunction(env);
//        crossFunction(env);


    }

    public static void crossFunction(ExecutionEnvironment env) throws Exception {
        List<String> info1 = new ArrayList<String>();
        info1.add("曼联");
        info1.add("曼城");

        List<Integer> info2 = new ArrayList<Integer>();
        info2.add(1);
        info2.add(2);
        info2.add(3);

        DataSource<String> data1 = env.fromCollection(info1);
        DataSource<Integer> data2 = env.fromCollection(info2);

        data1.cross(data2).print();
    }

    public static void outJoinFunction(ExecutionEnvironment env) throws Exception {
        List<Tuple2<Integer, String>> info1 = new ArrayList();
        info1.add(new Tuple2<Integer, String>(1, "胖虎"));
        info1.add(new Tuple2<Integer, String>(2, "瘦虎"));
        info1.add(new Tuple2<Integer, String>(3, "回胜张"));
        info1.add(new Tuple2<Integer, String>(4, "金超越"));

        List<Tuple2<Integer, String>> info2 = new ArrayList();
        info2.add(new Tuple2<Integer, String>(1, "哈尔滨"));
        info2.add(new Tuple2<Integer, String>(2, "上海"));
        info2.add(new Tuple2<Integer, String>(3, "黄石"));
        info2.add(new Tuple2<Integer, String>(5, "杭州"));

        DataSource<Tuple2<Integer, String>> data1 = env.fromCollection(info1);
        DataSource<Tuple2<Integer, String>> data2 = env.fromCollection(info2);

//        data1.leftOuterJoin(data2).where(0).equalTo(0).with(new JoinFunction<Tuple2<Integer, String>,  Tuple2<Integer, String> ,Tuple3<Integer, String, String>>() {
//            public Tuple3<Integer, String, String> join(Tuple2<Integer, String> first, Tuple2<Integer, String> second) throws Exception {
//                if(second == null){
//                    return new Tuple3<Integer, String, String>(first.f0, first.f1, "-");
//                }
//                return new Tuple3<Integer, String, String>(first.f0, first.f1, second.f1);
//            }
//        }).print();

//        data1.rightOuterJoin(data2).where(0).equalTo(0).with(new JoinFunction<Tuple2<Integer, String>, Tuple2<Integer, String>, Tuple3<Integer, String, String>>() {
//            public Tuple3<Integer, String, String> join(Tuple2<Integer, String> first, Tuple2<Integer, String> second) throws Exception {
//                if (first == null) {
//                    return new Tuple3<Integer, String, String>(second.f0, "-", second.f1);
//                }else {
//                    return new Tuple3<Integer, String, String>(first.f0, first.f1, second.f1);
//                }
//            }
//        }).print();

        data1.fullOuterJoin(data2).where(0).equalTo(0).with(new JoinFunction<Tuple2<Integer, String>, Tuple2<Integer, String>, Tuple3<Integer, String, String>>() {
            public Tuple3<Integer, String, String> join(Tuple2<Integer, String> first, Tuple2<Integer, String> second) throws Exception {
                if (first == null) {
                    return new Tuple3<Integer, String, String>(second.f0, "-", second.f1);
                } else if (second == null) {
                    return new Tuple3<Integer, String, String>(first.f0, first.f1, "-");
                }else {
                    return new Tuple3<Integer, String, String>(first.f0, first.f1, second.f1);
                }

            }
        }).print();

    }

    public static void joinFunction(ExecutionEnvironment env) throws Exception {
        List<Tuple2<Integer, String>> info1 = new ArrayList();
        info1.add(new Tuple2<Integer, String>(1, "胖虎"));
        info1.add(new Tuple2<Integer, String>(2, "瘦虎"));
        info1.add(new Tuple2<Integer, String>(3, "回胜张"));
        info1.add(new Tuple2<Integer, String>(4, "金超越"));

        List<Tuple2<Integer, String>> info2 = new ArrayList();
        info2.add(new Tuple2<Integer, String>(1, "哈尔滨"));
        info2.add(new Tuple2<Integer, String>(2, "上海"));
        info2.add(new Tuple2<Integer, String>(3, "黄石"));
        info2.add(new Tuple2<Integer, String>(5, "杭州"));

        DataSource<Tuple2<Integer, String>> data1 = env.fromCollection(info1);
        DataSource<Tuple2<Integer, String>> data2 = env.fromCollection(info2);

        data1.join(data2).where(0).equalTo(0).with(new JoinFunction<Tuple2<Integer, String>,  Tuple2<Integer, String> ,Tuple3<Integer, String, String>>() {
            public Tuple3<Integer, String, String> join(Tuple2<Integer, String> first, Tuple2<Integer, String> second) throws Exception {
                return new Tuple3<Integer, String, String>(first.f0, first.f1, second.f1);
            }
        }).print();
    }

    public static void mapFunction(ExecutionEnvironment environment) throws Exception {
        List<Integer> list = new ArrayList<Integer>();
        for (int i = 1; i <= 10; i++) {
            list.add(i);
        }
        DataSource<Integer> dataSource = environment.fromCollection(list);

        dataSource.map(new MapFunction<Integer, Integer>() {
            public Integer map(Integer input) throws Exception {
                return input + 1;
            }
        }).print();

    }

    public static void filterFunction(ExecutionEnvironment environment) throws Exception {
        List<Integer> list = new ArrayList<Integer>();
        for (int i = 1; i <= 10; i++) {
            list.add(i);
        }

        DataSource<Integer> dataSource = environment.fromCollection(list);

        dataSource.map(new MapFunction<Integer, Integer>() {
            public Integer map(Integer value) throws Exception {
                return value + 1;
            }
        }).filter(new FilterFunction<Integer>() {
            public boolean filter(Integer input) throws Exception {
                return input > 5;
            }
        }).print();
    }

    public static void mapPartitionFunction(ExecutionEnvironment env) throws Exception {
        List<String> list = new ArrayList<String>();
        for (int i = 0; i < 100; i++) {
            list.add("student: " + i);
        }
        DataSource<String> data = env.fromCollection(list).setParallelism(5);

//        data.map(new MapFunction<String, String>() {
//            public String map(String input) throws Exception {
//                String connection = DBUtils.getConnection();
//                System.out.println("connection = [" + input + "]");
//                DBUtils.returnConnection(connection);
//                return input;
//            }
//        }).print();

        data.mapPartition(new MapPartitionFunction<String, String>() {
            public void mapPartition(Iterable<String> values, Collector<String> out) throws Exception {
                String connection = DBUtils.getConnection();
                System.out.println("connection = [" + connection + "]");
                DBUtils.returnConnection(connection);
            }
        }).print();
    }

    public static void firstFunction(ExecutionEnvironment env) throws Exception {
        List<Tuple2<Integer, String>> info = new ArrayList();
        info.add(new Tuple2<Integer, String>(1, "Hadoop"));
        info.add(new Tuple2<Integer, String>(1, "Spark"));
        info.add(new Tuple2<Integer, String>(1, "Flink"));
        info.add(new Tuple2<Integer, String>(2, "Java"));
        info.add(new Tuple2<Integer, String>(2, "Spring boot"));
        info.add(new Tuple2<Integer, String>(3, "linux"));
        info.add(new Tuple2<Integer, String>(4, "vue"));
        DataSource<Tuple2<Integer, String>> data = env.fromCollection(info);
        System.out.println("分割线");
        data.groupBy(0).first(2).print();
        System.out.println("分割线");
        data.groupBy(0).sortGroup(1, Order.ASCENDING).first(2).print();
    }

    public static void flatMapFunction(ExecutionEnvironment env) throws Exception {
        List<String> info = new ArrayList();
        info.add("hadoop,spark");
        info.add("hadoop,flink");
        info.add("flink,flink");
        DataSource<String> data = env.fromCollection(info);
        data.flatMap(new FlatMapFunction<String, String>() {
            public void flatMap(String input, Collector<String> out) throws Exception {
                String[] splits = input.split(",");
                for (String split : splits) {
                    out.collect(split);
                }
            }
        }).map(new MapFunction<String, Tuple2<String, Integer>>() {
            public Tuple2<String, Integer> map(String value) throws Exception {
                return new Tuple2<String, Integer>(value, 1);
            }
        }).groupBy(0).sum(1).print();
    }

    public static void distinctFunction(ExecutionEnvironment env) throws Exception {
        List<String> info = new ArrayList();
        info.add("hadoop,spark");
        info.add("hadoop,flink");
        info.add("flink,flink");
        DataSource<String> data = env.fromCollection(info);
        data.flatMap(new FlatMapFunction<String, String>() {
            public void flatMap(String value, Collector<String> out) throws Exception {
                String[] splits = value.split(",");
                for (String split : splits) {
                    out.collect(split);
                }
            }
        }).distinct().print();
    }
}
