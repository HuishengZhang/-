package cn.zhanghuisheng.course04

import org.apache.flink.api.common.functions.RichMapFunction
import org.apache.flink.api.scala.ExecutionEnvironment
import org.apache.flink.configuration.Configuration

object BroadcastApp {

  def main(args: Array[String]): Unit = {
    val env = ExecutionEnvironment.getExecutionEnvironment

    import org.apache.flink.api.scala._

    val toBroadcast = env.fromElements(1,2,3)

    val data = env.fromElements("a", "b")

    data.map(new RichMapFunction[String, (String, String)]() {

      var broadcastSet: Traversable[Int] = null

      override def open(parameters: Configuration):Unit = {
        import scala.collection.JavaConverters._
        broadcastSet = getRuntimeContext()
          .getBroadcastVariable[Int]("broadcastSetName")
            .asScala
      }

      def map(in: String):(String, String) = {
        var result = ""
        for(broadVariable <- broadcastSet){
          result = result + broadVariable + " "
        }
        (in, result)
      }
    }).withBroadcastSet(toBroadcast, "broadcastSetName").print()

  }

}
