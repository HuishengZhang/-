package cn.zhanghuisheng.course04

import org.apache.flink.api.common.accumulators.LongCounter
import org.apache.flink.api.common.functions.RichMapFunction
import org.apache.flink.api.scala.ExecutionEnvironment
import org.apache.flink.configuration.Configuration
import org.apache.flink.core.fs.FileSystem.WriteMode

/**
  * 基于flink编程的计数器，编程开发三部曲
  * step1:定义计数器
  * step2:注册计数器
  * step3:获取计数器
  */
object CounterApp {
  def main(args: Array[String]): Unit = {

    val env = ExecutionEnvironment.getExecutionEnvironment
    import org.apache.flink.api.scala._
    val data = env.fromElements("hadoop", "spark", "storm", "pyspark", "flink")

    //    data.map(new RichMapFunction[String, Long]() {
    //      var count = 0l
    //      override def map(value: String): Long = {
    //        count = count + 1
    //        println("counter: " + count)
    //        count
    //      }
    //    }).setParallelism(4).print()

    val info = data.map(new RichMapFunction[String, String]() {

      //step1:定义累加器
      val counter = new LongCounter()

      override def open(parameters: Configuration): Unit = {
        //step2:注册计数器
        getRuntimeContext.addAccumulator("element-count-scala", counter)
      }

      override def map(value: String): String = {
        counter.add(1)
        value
      }
    })

    val path = "file:///D://BaiduNetdiskDownload/flink-train-java/sinkout"
    info.writeAsText(path, WriteMode.OVERWRITE).setParallelism(5)

//    info.print()
    val jobResult = env.execute("CountApp")

    //step3:获取计数器
    val num = jobResult.getAccumulatorResult[Long]("element-count-scala")

    println("num: " + num)
  }
}
