/**
 * 如题，有一个字符串它的构成是词+空格的组合，如“北京 杭州 杭州 北京”， 要求输入一个匹配模式（简单的以字符来写）， 比如 aabb, 来判断该字符串是否符合该模式， 举个例子：
 * pattern = “abba”, str=”北京 杭州 杭州 北京” 返回 true
 * pattern = “aabb”, str=”北京 杭州 杭州 北京” 返回 false
 * pattern = “baab”, str=”北京 杭州 杭州 北京” 返回 true
 *  ———————————————— 
 * 版权声明：本文为CSDN博主「decode-life」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。
 * 原文链接：https://blog.csdn.net/abudexiatian/article/details/78060452
 */

import java.util.ArrayList;
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        String pattern = "abbace";
        String str = "北京 杭州 杭州 北京 浙江 山西";
        Boolean res = method(str, pattern);
        System.out.println(res);
    }

    private static boolean method(String str, String pattern) {
        String[] stringSplits = str.trim().split(" ");
        char[] patternSplits = pattern.toCharArray();
        if(stringSplits.length != patternSplits.length){
            return false;
        }
        HashMap<Character, String> map = new HashMap<>();
        ArrayList<Character> list = new ArrayList<>();
        for(int i = 0; i < patternSplits.length; i++){
            if(!map.containsKey(patternSplits[i])){
                if(list.contains(patternSplits[i])){
                    return false;
                }
                map.put(patternSplits[i], stringSplits[i]);
                list.add(patternSplits[i]);
            }else {
                if(!stringSplits[i].equals(map.get(patternSplits[i]))){
                    return false;
                }
            }
        }
        return true;
    }
}
