
public class Main {
        public static void main(String[] args) {
            Main main = new Main();
            int[] arr = {1,3,5,7,3,1,9,2,4,6,8};
            //main.insertSort(arr);
            //main.quickSort(arr, 0, arr.length - 1);
            //main.selectSort(arr);
            main.mergeSort(arr, 0, arr.length - 1);
            for(Integer i : arr){
                System.out.println(i);
            }
            }

    /**
     * 插入排序
     * 思路：遍历数组，前面的是已排列的元素，将元素插入到合适的位置
     * 最好的情况是序列已经是升序，需要进行n - 1次比较，最好的时间复杂度是O（n）
     * 最坏的情况是序列是降序排列，总共需要n(n-1)/2次比较，最坏的时间复杂度为O(n^2)
     * 平均时间复杂度： O（n^2）
     * 只用到一个临时变量，空间复杂度为O（1）
     * 稳定排序
     * @param array
     */
        public void insertSort(int[] array){
            int temp = 0;
            int j = 0;
            for (int i = 1; i < array.length; i++){
                if(array[i] < array[i - 1]){
                    j = i;
                    while (j > 0){
                        if(array[j] < array[j - 1]){
                            temp = array[j];
                            array[j] = array[j - 1];
                            array[j - 1] =temp;
                        }
                        j--;
                    }
                }
            }
        }


    /**
     * 选择排序
     * 思路：遍历数组，将未遍历到的部分的最小值与当前位置的数值交换
     * 最好的情况是输入序列已经升序，但不需要交换数组，最好的时间复杂度为O(n^2)
     * 最坏的情况是序列逆序，时间复杂度为O(n^2)
     * 空间复杂度为O(1)
     * 非稳定排序算法
     * @param arr
     */
    public void selectSort(int[] arr){
            int temp = 0;
            for(int i = 0; i < arr.length; i++){
                int minIndex = i;
                for (int j = i + 1; j < arr.length; j++){
                    if(arr[j] < arr[minIndex]){
                        minIndex = j;
                    }
                }
                temp = arr[i];
                arr[i] = arr[minIndex];
                arr[minIndex] = temp;
            }
        }


    /**
     * 快速排序
     * 最坏的情况时数组是逆序或者顺序，此时退化成冒泡排序，时间复杂度为O(n^2)，空间复杂度为O（n）
     * 最优情况下每次都能平均划分，复杂度为O(nlog(n)),空间复杂度为O（logn）
     *
     *
     * @param arr
     * @param left
     * @param right
     */
    public void quickSort(int[] arr, int left, int right){
        if(left >= right){
            return;
        }
        int i = left;
        int j= right;
        int temp = arr[left];
        while (i < j){
            while (arr[j] >= temp && i < j){
                j--;
            }
            while (arr[i] <= temp && i < j){
                i++;
            }
            if(i < j){
                int a = arr[i];
                arr[i] = arr[j];
                arr[j] = a;
            }
        }
        arr[left] = arr[i];
        arr[i] = temp;
        quickSort(arr, left, i - 1);
        quickSort(arr, i + 1, right);
        }

    /**
     * 归并排序
     * 时间复杂度：O（nlog(n)）
     * 空间复杂度：O(n)
     * 算法稳定
     * @param arr
     * @param L
     * @param R
     */
        public void mergeSort(int[] arr, int L, int R){
        if(L == R){
            return;
        }
        int mid = L + ((R - L) >> 1);
        mergeSort(arr, L, mid);
        mergeSort(arr, mid + 1, R);
        merge(arr, L, mid, R);
        }

        public void merge(int[] arr, int L, int mid, int R){
        int[] temp = new int[R -L + 1];
        int i = 0;
        int p1 = L;
        int p2 = mid + 1;
        //比较左右两边的元素，哪个小，就把哪个填入temp中
            while (p1 <= mid && p2 <= R){
                temp[i++] = arr[p1] < arr[p2] ? arr[p1++] : arr[p2++];
            }
            //上面循环退出后，把剩余的元素依次填入到temp中
            //以下两个while只有一个会执行
            while (p1 <= mid){
                temp[i++] = arr[p1++];
            }
            while (p2 <= R){
                temp[i++] = arr[p2++];
            }
            //把最终结果复制给原数组
            for(i = 0; i < temp.length; i++){
                arr[L + i] = temp[i];
            }
        }
}
